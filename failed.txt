"use client";
import React, { useState } from 'react';
import { useWallet } from '@solana/wallet-adapter-react';
import { Program, AnchorProvider, web3, Idl } from '@project-serum/anchor';
import { Keypair, PublicKey, SystemProgram, ComputeBudgetProgram, Transaction, VersionedTransaction,SimulateTransactionConfig, AccountInfo, Signer } from '@solana/web3.js';
import {
    TOKEN_PROGRAM_ID,
    ASSOCIATED_TOKEN_PROGRAM_ID,
    createAssociatedTokenAccountInstruction,
    createInitializeMintInstruction,
    MINT_SIZE
} from '@solana/spl-token';
import { getProvider, getProgram } from '../web3/connection'; // Ensure this path is correct

const { SYSVAR_RENT_PUBKEY } = web3;
const anchor = require('@project-serum/anchor');

const InitializeRwa: React.FC = async () => {
    const { publicKey, sendTransaction, wallet } = useWallet();
    const [uri, setUri] = useState('');
    const [name, setName] = useState('');
    const [totalSupply, setTotalSupply] = useState<number>(0);
    const [pricePerFraction, setPricePerFraction] = useState<number>(0);
    const [mintPublicKey, setMintPublicKey] = useState<PublicKey | null>(null);
    const [rwaMetadataPublicKey, setRwaMetadataPublicKey] = useState<PublicKey | null>(null);
    const TOKEN22_PROGRAM_ID = new anchor.web3.PublicKey("TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb");
    const MINIMUM_BALANCE_FOR_TRANSACTION = 0.001 * anchor.web3.LAMPORTS_PER_SOL;


    const handleInitializeRwa = async () => {
        if (!publicKey || !wallet) {
            console.error("Wallet not connected");
            alert("Please connect your wallet first");
            return;
        }

        if (uri.length > 200) {
            alert("URI is too long. Maximum length is 200 characters.");
            return;
        }

        if (name.length > 50) {
            alert("Name is too long. Maximum length is 50 characters.");
            return;
        }

        const provider = getProvider();
        if (!provider) {
            console.error("Provider is not available");
            alert("Provider is not available");
            return;
        }

        const program = getProgram();
        if (!program) {
            console.error("Program is not available");
            alert("Program is not available");
            return;
        }

        try {
            const balance = await provider.connection.getBalance(publicKey);
            if (balance < MINIMUM_BALANCE_FOR_TRANSACTION) {
                alert("Insufficient SOL balance to cover transaction fees");
                return;
            }

            // Step 1: Create mint account if needed
            if (!mintPublicKey) {
                const mintKeypair = Keypair.generate();
                console.log("Creating new mint account...");
                try {
                    const lamports = await provider.connection.getMinimumBalanceForRentExemption(MINT_SIZE);
                    console.log("Lamports required for mint account:", lamports);

                    const createMintAccountIx = SystemProgram.createAccount({
                        fromPubkey: publicKey,
                        newAccountPubkey: mintKeypair.publicKey,
                        space: MINT_SIZE,
                        lamports,
                        programId: TOKEN_PROGRAM_ID,
                    });

                    const initializeMintIx = createInitializeMintInstruction(
                        mintKeypair.publicKey,
                        0, // decimals
                        publicKey, // mint authority
                        publicKey, // freeze authority
                        TOKEN22_PROGRAM_ID
                    );

                    const createMintTransaction = new Transaction().add(createMintAccountIx, initializeMintIx);

                    const txId = await sendTransaction(createMintTransaction, provider.connection, { signers: [mintKeypair] });
                    console.log("Transaction ID:", txId);

                    await provider.connection.confirmTransaction(txId, 'confirmed');
                    console.log("Mint creation transaction confirmed:", txId);

                    setMintPublicKey(mintKeypair.publicKey);

                } catch (error) {
                    console.error("Error sending mint creation transaction:", error);
                    if (error instanceof Error) {
                        if (error.message.includes("User rejected the request")) {
                            alert("Mint creation transaction was rejected by the user");
                        } else {
                            alert(`Failed to create mint: ${error.message}`);
                        }
                    } else {
                        alert('Failed to create mint: Unknown error');
                    }
                    return;
                }
            }


            // Step 2: Generate a new RWA metadata account with improved retry mechanism
            let rwaMetadataKeypair: Keypair;
            let accountInfo: AccountInfo<Buffer> | null;
            let retryCount = 0;
            const maxRetries = 10;

            do {
                rwaMetadataKeypair = Keypair.generate();
                accountInfo = await provider.connection.getAccountInfo(rwaMetadataKeypair.publicKey);

                if (accountInfo !== null) {
                    console.log(`Account ${rwaMetadataKeypair.publicKey.toBase58()} already exists. Retrying...`);
                    retryCount++;
                }
            } while (accountInfo !== null && retryCount < maxRetries);

            if (retryCount >= maxRetries) {
                throw new Error("Max retries reached. Unable to generate a unique account.");
            }

            console.log("Generated RWA metadata account:", rwaMetadataKeypair.publicKey.toBase58());

            // Step 3: Build combined transaction
            const modifyComputeUnits = ComputeBudgetProgram.setComputeUnitLimit({
                units: 400000,
            });

            const rwaMetadataSize = program.account.rwaMetadata.size;
            const rwaMetadataLamports = await provider.connection.getMinimumBalanceForRentExemption(rwaMetadataSize);

            const createMetadataAccountIx = SystemProgram.createAccount({
                fromPubkey: publicKey,
                newAccountPubkey: rwaMetadataKeypair.publicKey,
                space: rwaMetadataSize,
                lamports: rwaMetadataLamports,
                programId: program.programId,
            });

            const initializeIx = await program.methods.initializeRwa(
                uri,
                name,
                new anchor.BN(totalSupply),
                new anchor.BN(pricePerFraction)
            ).accounts({
                rwaMetadata: rwaMetadataKeypair.publicKey,
                creator: publicKey,
                mint: mintPublicKey,
                systemProgram: SystemProgram.programId,
                tokenProgram: TOKEN22_PROGRAM_ID,
                rent: anchor.web3.SYSVAR_RENT_PUBKEY,
            }).instruction();

            const combinedTransaction = new Transaction()
                .add(modifyComputeUnits)
                .add(createMetadataAccountIx)
                .add(initializeIx);

            // Step 4: Simulate transaction
            const { blockhash, lastValidBlockHeight } = await provider.connection.getLatestBlockhash();
            combinedTransaction.recentBlockhash = blockhash;
            combinedTransaction.feePayer = publicKey;

            try {
                // Simulate the VersionedTransaction with commitment
                const simulationResult = await provider.connection.simulateTransaction(versionedTransaction, {
                    commitment: "confirmed"
                });

                // Destructure to extract the value from the response
                const { value: simulation } = simulationResult;

                // Check if there was an error during simulation
                if (simulation.err) {
                    console.error("Simulation Error Occurred:", simulation.err);

                    // Provide detailed simulation logs for debugging
                    console.error("Simulation Logs:", simulation.logs);

                    // Throw an error with detailed information
                    throw new Error(`Simulation failed with error: ${JSON.stringify(simulation.err)}`);
                } else {
                    // Log the successful simulation result
                    console.log("Simulation was successful. Result:", simulation);
                }

            } catch (error) {
                // Handle any errors that might occur during the simulation
                console.error("An error occurred during transaction simulation:", error);

                // Optional: You can throw the error again if you want the calling function to handle it
                // throw error;
            }

            // Step 5: Sign and send transaction
            try {
                const signature = await sendAndConfirmTransaction(
                    provider.connection,
                    combinedTransaction,
                    [provider.wallet.publicKey, rwaMetadataKeypair],
                    {
                        skipPreflight: false, preflightCommitment: "confirmed",
                        maxRetries: 0
                    }
                );

                console.log("Combined transaction sent and confirmed:", signature);

                setRwaMetadataPublicKey(rwaMetadataKeypair.publicKey);
                console.log("RWA Metadata initialized successfully");
                alert("RWA Metadata initialized successfully");
            } catch (error) {
                console.error("Error in sending and confirming transaction:", error);
                if (error instanceof Error) {
                    if (error.message.includes("User rejected the request")) {
                        alert("Transaction was rejected by the user");
                    } else {
                        alert(`Failed to send and confirm transaction: ${error.message}`);
                    }
                } else {
                    alert("Failed to send and confirm transaction: Unknown error");
                }
            }


        } catch (err) {
            console.error("Error in handleInitializeRwa:", err);
            if (err instanceof Error) {
                console.error("Error details:", err.message);
                if ('logs' in err) {
                    console.error("Transaction logs:", (err as any).logs);
                }
                alert(`Error initializing RWA metadata: ${err.message}`);
            } else {
                console.error("Unexpected error object:", err);
                alert("An unexpected error occurred while initializing RWA metadata");
            }
        }
    };















    const handleMintRwaTokens = async () => {
        if (!publicKey || !mintPublicKey || !rwaMetadataPublicKey || !wallet) {
            console.error("Missing required data for minting");
            alert("Please ensure wallet is connected and RWA is initialized");
            return;
        }

        const provider = getProvider();
        if (!provider) {
            console.error("Provider is not available");
            alert("Provider is not available");
            return;
        }

        const program = getProgram();
        if (!program) {
            console.error("Program is not available");
            alert("Program is not available");
            return;
        }

        try {
            // Get the associated token account address
            const [associatedTokenAccount] = await PublicKey.findProgramAddress(
                [publicKey.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mintPublicKey.toBuffer()],
                ASSOCIATED_TOKEN_PROGRAM_ID
            );

            // Check if the associated token account exists
            const accountInfo = await provider.connection.getAccountInfo(associatedTokenAccount);

            let transaction = new Transaction();

            // If the account doesn't exist, add instruction to create it
            if (!accountInfo) {
                transaction.add(
                    createAssociatedTokenAccountInstruction(
                        publicKey,
                        associatedTokenAccount,
                        publicKey,
                        mintPublicKey
                    )
                );
            }

            // Add instruction to mint RWA tokens
            transaction.add(
                await program.methods.mintRwaTokens(new anchor.BN(500)).accounts({
                    mint: mintPublicKey,
                    tokenAccount: associatedTokenAccount,
                    rwaMetadata: rwaMetadataPublicKey,
                    creator: publicKey,
                    tokenProgram: TOKEN_PROGRAM_ID,
                }).instruction()
            );

            // Send the transaction
            const { blockhash, lastValidBlockHeight } = await provider.connection.getLatestBlockhash();
            const txId = await sendTransaction(transaction, provider.connection);
            console.log("Minting transaction sent:", txId);

            await provider.connection.confirmTransaction({
                signature: txId,
                blockhash: blockhash,
                lastValidBlockHeight: lastValidBlockHeight
            }, 'confirmed');
            console.log("Minted RWA Tokens successfully");
        } catch (err) {
            console.error("Error minting RWA tokens:", err);
            if (err instanceof Error) {
                console.error("Error details:", err.message);
                if ('logs' in err) {
                    console.error("Transaction logs:", (err as any).logs);
                }
                alert(`Error minting RWA tokens: ${err.message}`);
            } else {
                console.error("Unexpected error object:", err);
                alert("An unexpected error occurred while minting RWA tokens");
            }
        }
    };

    return (
        <div>
            <h1>Initialize RWA</h1>
            <form
                onSubmit={(e) => {
                    e.preventDefault();
                    handleInitializeRwa();
                }}
            >
                <input
                    className='text-black'
                    type="text"
                    placeholder="URI"
                    value={uri}
                    onChange={(e) => setUri(e.target.value)}
                />
                <input
                    className='text-black'
                    type="text"
                    placeholder="Name"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                />
                <input
                    className='text-black'
                    type="number"
                    placeholder="Total Supply"
                    value={totalSupply}
                    onChange={(e) => setTotalSupply(Number(e.target.value))}
                />
                <input
                    className='text-black'
                    type="number"
                    placeholder="Price per Fraction"
                    value={pricePerFraction}
                    onChange={(e) => setPricePerFraction(Number(e.target.value))}
                />
                <button type="submit">Initialize RWA</button>
            </form>

            <h1>Mint RWA Tokens</h1>
            <button onClick={handleMintRwaTokens}>Mint Tokens</button>
        </div>
    );
};

export default InitializeRwa;

function sendAndConfirmTransaction(connection: web3.Connection, createMintTransaction: web3.Transaction, arg2: any[], p0: { skipPreflight: boolean; preflightCommitment: string; maxRetries: number; }) {
    throw new Error('Function not implemented.');
}









"use client";

import React, { useState } from "react";
import { useWallet } from "@solana/wallet-adapter-react";
import { web3 } from "@project-serum/anchor";
import {
    PublicKey,
    SystemProgram,
    ComputeBudgetProgram,
    Transaction,
    Keypair,
    AccountInfo,
    sendAndConfirmTransaction,
} from "@solana/web3.js";
import {
    TOKEN_PROGRAM_ID,
    createInitializeMintInstruction,
    MINT_SIZE,
} from "@solana/spl-token";
import { getProvider, getProgram } from "../web3/connection";

const { SYSVAR_RENT_PUBKEY } = web3;
const anchor = require("@project-serum/anchor");

const TOKEN22_PROGRAM_ID = new anchor.web3.PublicKey(
    "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
);

const MINIMUM_BALANCE_FOR_TRANSACTION = 0.001 * web3.LAMPORTS_PER_SOL;

const InitializeRwa = () => {
    const { publicKey, signTransaction, sendTransaction } = useWallet();
    const [uri, setUri] = useState<string>("");
    const [name, setName] = useState<string>("");
    const [totalSupply, setTotalSupply] = useState<number>(0);
    const [pricePerFraction, setPricePerFraction] = useState<number>(0);
    const [mintPublicKey, setMintPublicKey] = useState<PublicKey | null>(null);
    const [rwaMetadataPublicKey, setRwaMetadataPublicKey] = useState<PublicKey | null>(null);

    const handleInitializeRwa = async (e: React.FormEvent) => {
        e.preventDefault();

        if (!publicKey || !signTransaction) {
            console.error("Wallet not connected");
            alert("Please connect your wallet first");
            return;
        }

        if (uri.length > 200) {
            alert("URI is too long. Maximum length is 200 characters.");
            return;
        }

        if (name.length > 50) {
            alert("Name is too long. Maximum length is 50 characters.");
            return;
        }

        const provider = getProvider();
        if (!provider) {
            alert("Provider is not available");
            return;
        }

        const program = getProgram();
        if (!program) {
            alert("Program is not available");
            return;
        }

        try {
            await initializeRwaAsync(publicKey, provider, program);
            alert("RWA Metadata initialized successfully");
        } catch (err) {
            alert(`Error initializing RWA metadata: ${err instanceof Error ? err.message : "Unknown error"}`);
        }
    };

    const initializeRwaAsync = async (publicKey: PublicKey, provider: any, program: any) => {
        const balance = await provider.connection.getBalance(publicKey);
        if (balance < MINIMUM_BALANCE_FOR_TRANSACTION) {
            throw new Error("Insufficient SOL balance to cover transaction fees");
        }

        if (!mintPublicKey) {
            const mintKeypair = Keypair.generate();
            const lamports = await provider.connection.getMinimumBalanceForRentExemption(MINT_SIZE);

            const createMintAccountIx = SystemProgram.createAccount({
                fromPubkey: publicKey,
                newAccountPubkey: mintKeypair.publicKey,
                space: MINT_SIZE,
                lamports,
                programId: TOKEN22_PROGRAM_ID,
            });

            const initializeMintIx = createInitializeMintInstruction(
                mintKeypair.publicKey,
                0,
                publicKey,
                publicKey
            );

            try {
                const createMintTransaction = new Transaction().add(createMintAccountIx, initializeMintIx);
                createMintTransaction.feePayer = publicKey;

                const { blockhash } = await provider.connection.getLatestBlockhash();
                createMintTransaction.recentBlockhash = blockhash;

                createMintTransaction.partialSign(mintKeypair);

                const signature = await sendAndConfirmTransaction(
                    provider.connection,
                    createMintTransaction,
                    [mintKeypair],
                    { commitment: "confirmed" }
                );

                console.log("Transaction confirmed with signature:", signature);

                setMintPublicKey(mintKeypair.publicKey);
            } catch (error) {
                const err = error as Error;
                throw new Error(`Transaction failed: ${err.message}`);
            }
        }

        let rwaMetadataKeypair: Keypair;
        let accountInfo: AccountInfo<Buffer> | null;
        let retryCount = 0;
        const maxRetries = 10;

        do {
            rwaMetadataKeypair = Keypair.generate();
            accountInfo = await provider.connection.getAccountInfo(rwaMetadataKeypair.publicKey);
            retryCount++;
        } while (accountInfo !== null && retryCount < maxRetries);

        if (retryCount >= maxRetries) {
            throw new Error("Max retries reached. Unable to generate a unique account.");
        }

        const modifyComputeUnits = ComputeBudgetProgram.setComputeUnitLimit({ units: 1000000 });
        const rwaMetadataSize = program.account.rwaMetadata.size;
        const rwaMetadataLamports = await provider.connection.getMinimumBalanceForRentExemption(rwaMetadataSize);

        const createMetadataAccountIx = SystemProgram.createAccount({
            fromPubkey: publicKey,
            newAccountPubkey: rwaMetadataKeypair.publicKey,
            space: rwaMetadataSize,
            lamports: rwaMetadataLamports,
            programId: program.programId,
        });

        const initializeIx = await program.methods.initializeRwa(
            uri,
            name,
            new anchor.BN(totalSupply),
            new anchor.BN(pricePerFraction)
        ).accounts({
            rwaMetadata: rwaMetadataKeypair.publicKey,
            creator: publicKey,
            mint: mintPublicKey,
            systemProgram: SystemProgram.programId,
            tokenProgram: TOKEN22_PROGRAM_ID,
            rent: SYSVAR_RENT_PUBKEY,
        }).instruction();

        const combinedTransaction = new Transaction()
            .add(modifyComputeUnits)
            .add(createMetadataAccountIx)
            .add(initializeIx);

        const txId = await sendAndConfirmTransaction(
            provider.connection,
            combinedTransaction,
            [rwaMetadataKeypair],
            { skipPreflight: false, preflightCommitment: "confirmed" }
        );

        setRwaMetadataPublicKey(rwaMetadataKeypair.publicKey);
    };

    return (
        <div>
            <h1>Initialize RWA</h1>
            <form onSubmit={handleInitializeRwa}>
                <input
                    className="text-black"
                    type="text"
                    placeholder="URI"
                    value={uri}
                    onChange={(e) => setUri(e.target.value)}
                    maxLength={200}
                    required
                />
                <input
                    className="text-black"
                    type="text"
                    placeholder="Name"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    maxLength={50}
                    required
                />
                <input
                    className="text-black"
                    type="number"
                    placeholder="Total Supply"
                    value={totalSupply}
                    onChange={(e) => setTotalSupply(Number(e.target.value))}
                    required
                />
                <input
                    className="text-black"
                    type="number"
                    placeholder="Price per Fraction"
                    value={pricePerFraction}
                    onChange={(e) => setPricePerFraction(Number(e.target.value))}
                    required
                />
                <button type="submit">Initialize RWA</button>
            </form>
            {mintPublicKey && <p>Mint Public Key: {mintPublicKey.toBase58()}</p>}
            {rwaMetadataPublicKey && <p>RWA Metadata Public Key: {rwaMetadataPublicKey.toBase58()}</p>}
        </div>
    );
};

export default InitializeRwa;
